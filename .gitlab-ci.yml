#
#
# Useful Links:
# - CI/CD Lint : https://gitlab-ex.sandia.gov/trilinos-devops-consolidation/code/ConfigParserEnhanced/-/ci/lint
# - Gitlab YAML: https://docs.gitlab.com/ee/ci/yaml/


# Set up a global cache to pass info across stages
cache: &global_cache
  key: "${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHORT_SHA}"
  paths:
    - tests/htmlcov/
    - venv-clean-python/
  policy: pull-push


# Set up pipeline stages
stages:
  - prepare
  - test
  - deploy
  - examples
  - documentation
  - publish
  - cleanup


# Script to run before every job
before_script:
  - |-
    export LSB_RELEASE=$(which lsb_release)
    if [ -x ${LSB_RELEASE} ]; then
        ${LSB_RELEASE} -a
    fi
  - |-
    if [ -d "venv-clean-python" ]; then
        source venv-clean-python/bin/activate
    else
        echo "Virtual Environment 'venv-clean-python' was not found"
        exit 1
    fi
    echo "-----"
    echo "VIRTUAL_ENV = ${VIRTUAL_ENV:?}"
    echo "-----"


# Script to run after every job
after_script:
  - |-
    if [ ! -z ${VIRTUAL_ENV} ]; then
        deactivate
    fi


# Create venv, install requirements, save cache
install_requirements:
  stage: prepare
  timeout: 10m
  #artifacts:
  #  untracked: true
  before_script:
    - python3 -m venv venv-clean-python
  cache:
    <<: *global_cache
    when: on_success
  script:
    #- echo "CI_COMMIT_REF_SLUG = ${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHORT_SHA}"
    - source venv-clean-python/bin/activate

    # Remove configparserenhanced if it's been installed
    - python3 -m pip uninstall -y configparserenhanced

    # Pull required packages
    - python3 -m pip install wheel -r requirements.txt -r requirements-test.txt -r doc/requirements.txt



# Execute unit tests
pytest:
  stage: test
  timeout: 5m
  #dependencies:
  #- install_requirements
  script:
    - python3 -m pytest --cov=configparserenhanced  --cov-report=term --cov-report=html --cov-config=.coveragerc
  coverage: '/TOTAL\s*\d+\s+\d+\s+\d+\s+\d+\s+(\d+%)/'
  cache:
    <<: *global_cache


# Test distribution building
build_dist:
  stage: deploy
  timeout: 5m
  #cache:
  #  key: venv
  #  paths:
  #  - venv-clean-python/
  cache:
    <<: *global_cache
    policy: pull
  script:
    #- python3 -m pip install wheel
    - python3 -m pip wheel --no-deps -w dist .
  artifacts:
    name: "configparserenhanced-dist"
    paths:
      - dist/configparserenhanced*.whl
    expire_in: 6 weeks


# Test installation of package
install:
  stage: deploy
  timeout: 5m
  #dependencies:
  #- install_requirements
  #artifacts:
  #  untracked: true
  #cache:
  #  key: venv
  #  paths:
  #  - venv-clean-python/
  cache:
    <<: *global_cache
  script:
    - python3 -m pip install .


# Test example(s)
examples:
  stage: examples
  #dependencies:
  #- install_requirements
  #- install
  timeout: 5m
  #cache:
  #  key: venv
  #  paths:
  #  - venv-clean-python/
  cache:
    <<: *global_cache
    policy: pull
  script:
    - cd examples
    - python3 ./ConfigParserEnhanced-example-01.py


# Generate documentation
sphinx-documentation:
  stage: documentation
  timeout: 5m
  cache:
    <<: *global_cache
  script:
    - cd doc/
    - bash make_html_docs.sh


# Publish coverage data (if on main branch)
publish coverage:
  stage: publish
  timeout: 5m
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  cache:
    <<: *global_cache
    policy: pull
  script:
    #- python3 -m pytest --cov=configparserenhanced --cov-report=term --cov-report=html --cov-config=.coveragerc
    - rm -rf /home/josbrau/html_files/ConfigParserEnhanced/coverage
    - mkdir -p /home/josbrau/html_files/ConfigParserEnhanced/coverage
    - mv tests/htmlcov/* /home/josbrau/html_files/ConfigParserEnhanced/coverage/
  #cache:
  #  key: coverage-data
  #  paths:
  #    - tests/htmlcov/


# Publish documentation (if on main branch)
publish docs:
  stage: publish
  timeout: 5m
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  cache:
    <<: *global_cache
    policy: pull
  script:
    - cd doc/
    # - python3 -m pip install -r requirements.txt
    - bash make_html_docs.sh
    - rm -rf /home/josbrau/html_files/ConfigParserEnhanced/doc
    - mkdir -p /home/josbrau/html_files/ConfigParserEnhanced/doc
    - mv html/* /home/josbrau/html_files/ConfigParserEnhanced/doc/


# Test uninstall from venv works
uninstall:
  stage: cleanup
  timeout: 5m
  #dependencies:
  #- install
  #cache:
  #  key: venv
  #  paths:
  #  - venv-clean-python/
  cache:
    <<: *global_cache
  script:
    - python3 -m pip uninstall -y configparserenhanced

    # - python3 -m pip uninstall -y -r requirements.txt
    # >>> In a virtual environment, this won't work if there are no entries in
    # >>> the requirements.txt file.



