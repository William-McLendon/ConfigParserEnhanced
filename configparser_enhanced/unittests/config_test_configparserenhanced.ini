#
# Configuration .ini File
# =======================
#
# This file is organized by sections [section_name] where each section defines
# a set of key-value pairs.  Keys and values can be separated by ':' or "=" delimiters
# and both keys and values can have spaces.
#
# In this application, we split our keys into two values and the value side is handled
# based on what the `command` is:
#
#     <command> <key> : <value>
#
# Commands
# --------
# - use <SECTION_NAME>:
#   + Instructs the system to process a different section of the .ini file and insert the
#     commands it provides into the list of actions to be performed. The system will
#     recursively process all sections included with cyclic dependency detection to prevent
#     infinite recursion.
#   + The <value> parameter is ignored for this command.
#
# Tips and Tricks
# ---------------
#
# #### Multiple Entries to an ENVVAR
# Adding multiple entries to an environment variable can result in a very long string
# being added that may not be easy to maintain aesthetically. Unfortunately, we cannot
# insert multiple setenv lines with the same envvar within the same section due to a
# key-conflict. One workaround for this is to use temp envvars and then unset them when
# you're done.  For example:
#
# setenv PATH_TMP  : "/my/first/path/to/prepend:${PATH}"
# setenv PATH      : "/my/second/path/to/prepend:${PATH_TMP}"
# unsetenv PATH_TMP:
#
# #### Nonconforming Sections
# Since this file is essentially just a .ini style file that can be processed via the
# configparser module in Python, you can add additional sections that do not conform
# to the setEnvironment style. These will be ignored unless you attempt to load them
# by either providing the section name to the class constructor _or_ try to load them
# via a `use <section>` operation.
#
# =====================================================================================================================

[SECTION-A]
key1: value1
key2: value2
key3: value3

[SECTION-B]
key1: value 1
key2: value 2
key3: value 3

[SECTION C]
key 1: value 1
key 2: value 2
key 3: value 3

[SECTION-A+]
use SECTION-A:
key4: value4

[SECTION-B+]
use SECTION-B:
key4: value 4

[SECTION C+]
use 'SECTION C' 1:
key 4: value 4

[OPERAND_TEST]
op1:
op1 op2:
op1 'op2':
op1 'op 2':
op1 op2 op3:
op1 'op2' op3:
op-1
op-1 op2:
op-1 op2 op3:
op-1 'op2':
op-1 'op2' op3:
op-1 'op 2':
op-1 'op 2' op3:
op-1 op-2:
op_1 op_2:

[BAD_CHAR_IN_OP]
op@1 op2 op3: This should not parse due to the '@'
@@@@@@@@:


[CYCLE_TEST_A]
key1: value 1
use CYCLE_TEST_B

[CYCLE_TEST_B]
key1: value 1
use CYCLE_TEST_C

[CYCLE_TEST_C]
key1: value 1
use CYCLE_TEST_A
