#
# Configuration .ini File
# =======================
#
# This file is organized by sections [section_name] where each section defines
# a set of key-value pairs.  Keys and values can be separated by ':' or "=" delimiters
# and both keys and values can have spaces.
#
# In this application, we split our keys into two values and the value side is handled
# based on what the `command` is:
#
#     <command> <key> : <value>
#
# Commands
# --------
# - use <SECTION_NAME>:
#   + Instructs the system to process a different section of the .ini file and insert the
#     commands it provides into the list of actions to be performed. The system will
#     recursively process all sections included with cyclic dependency detection to prevent
#     infinite recursion.
#   + The <value> parameter is ignored for this command.
#
# Tips and Tricks
# ---------------
#
#

[SECTION-A]
key1: value1
key2: value2
key3: value3

[SECTION-B]
key1: value 1
key2: value 2
key3: value 3

[SECTION C]
key 1: value 1
key 2: value 2
key 3: value 3

[SECTION-A+]
use SECTION-A:
key4: value4

[SECTION-B+]
use SECTION-B:
key4: value 4

[SECTION C+]
use 'SECTION C' 1:
key 4: value 4

[OPERAND_TEST]
op1              : expect op1 = "op1"   op2 = None
op1 op2          : expect op1 = "op1"   op2 = "op2"
op1 'op2'        : expect op1 = "op1"   op2 = "op2"
op1 'op 2'       : expect op1 = "op1"   op2 = "op 2"
op1 op2 op3      : expect op1 = "op1"   op2 = "op2"
op1 'op2' op3    : expect op1 = "op1"   op2 = "op2"
op-1             : expect op1 = "op_1"  op2 = None
op-1 op2         : expect op1 = "op_1"  op2 = "op2"
op-1 op2 op3     : expect op1 = "op_1"  op2 = "op2"
op-1 'op2'       : expect op1 = "op_1"  op2 = "op2"
op-1 'op2' op3   : expect op1 = "op_1"  op2 = "op2"
op-1 'op 2'      : expect op1 = "op_1"  op2 = "op 2"
op-1 'op 2' op3  : expect op1 = "op_1"  op2 = "op 2"
op-1 op-2        : expect op1 = "op_1"  op2 = "op-2"
op_1 op_2        : expect op1 = "op_1"  op2 = "op_2"
op1   op2        : expect op1 = "op1"   op2 = "op2"
op1   op2  +++   : expect op1 = "op1"   op2 = "op2"



[BAD_CHAR_IN_OP]
op@1 op2 op3: This should not parse due to the '@'
@@@@@@@@:


[CYCLE_TEST_A]
cta 1: cta 1
use CYCLE_TEST_B (1)
use CYCLE_TEST_B (2)

[CYCLE_TEST_B]
ctb 1: ctb 1
use CYCLE_TEST_C

[CYCLE_TEST_C]
ctc 1: ctc 1
use CYCLE_TEST_A

[ENVVAR-PREPEND-TEST]
envvar-prepend PATH : /foo/bar/baz

[HANDLER_FAIL_TEST]
test_handler_fail :


#
# DEP TESTS
# - ConfigParserEnhancedDataSection (configdata_parsed)
#   should parse out to something like this:
#
# [DEP-TEST-A]
# key1: value1-A
# key2: value1-A
#
# [DEP-TEST-B]
# key1: value1-B
# key2: value2-A
#
[DEP-TEST-A]
use DEP-TEST-B:
key1: value1-A
key2: value2-A

[DEP-TEST-B]
use DEP-TEST-A:
key1: value1-B
